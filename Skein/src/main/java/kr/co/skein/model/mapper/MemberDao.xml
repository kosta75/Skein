<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.skein.model.dao.MemberDao">
	
	<!-- 사용자 목록(기본정보) 조회 -->
	<select id="getMembers" resultType="kr.co.skein.model.vo.Member">
		SELECT * FROM Members
		<where>
			<if test="searchKey != null">
				<choose>
					<when test="searchKey.equals('customURI')">
						personalURI LIKE '${searchValue}%' 
					</when>
					<otherwise>
						${searchKey} = #{searchValue}
					</otherwise>
				</choose>
			</if>
			
		</where>
	</select>
	
	<!-- 사용자 등록(기본정보) -->
	<insert id="registerMember" parameterType="kr.co.skein.model.vo.Member">
		INSERT INTO Members(Email, LastName, FirstName, FullName, Password, Birthday, PersonalURI, IsApproved, IsLockedOut, IsDomranted, IsDropedOut, CreateDate, CertificationText)
		VALUES(#{email}, #{lastName}, #{firstName}, #{fullName}, #{password}, #{birthday}, #{personalURI}, #{isApproved}, #{isLockedOut}, #{isDomranted}, #{isDropedOut}, SYSDATE, #{certificationText})
	</insert>
	
	<!-- 사용자 정보 갱신(기본 계정정보) -->
	<update id="updateMemberAccount" parameterType="kr.co.skein.model.vo.Member">
		UPDATE Members
		<set>
			<if test="isLockedOut != null">IsLockedOut = #{isLockedOut},</if>
			<if test="isDropedOut != null">IsDropedOut = #{isDropedOut},</if>
			<if test="isDomranted != null">IsDomranted = #{isDomranted},</if>
			<if test="isApproved != null">IsApproved = #{isApproved},</if>			
			<if test="certificationText != null">CertificationText = #{certificationText},</if>
			<if test="lastLoginDate != null">LastLoginDate = SYSDATE,</if>
			<if test="lastPasswordChangedDate != null">LastPasswordChangedDate = #{lastPasswordChangedDate},</if>
			<if test="failedPasswordAttemptCount != null">FailedPasswordAttemptCount = #{failedPasswordAttemptCount}</if>
		</set>
		WHERE email = #{email}
	</update>
	
	<!-- 사용자 권한 등록(기본권한) -->
	<insert id="createMemberAuthority" parameterType="kr.co.skein.model.vo.AuthorityCommand">
		INSERT INTO Authorities(Authority, Email)
		VALUES(#{authority}, #{email})
	</insert>
	
	<!-- 사용자 고유주소 조회 -->
	<select id="getPersonalURI" resultType="String">
		SELECT PersonalURI FROM Members WHERE Email = #{email}
	</select>
	
	<!-- 사용자 정보 조회 -->
	<select id="getMemberInfo" resultType="kr.co.skein.model.vo.Member">
		SELECT fullName, email, birthday FROM Members WHERE Email = #{email}
	</select>
	
	<!-- 사용자 테마 추가 -->
	<update id="updateColorTheme">
		UPDATE Members SET COLORTHEME=#{param1} WHERE email = #{param2}
	</update>
	
	<!-- 사용자 테마 조회 -->
	<select id="selectColorTheme" resultType="String">
		SELECT colorTheme FROM members WHERE email = #{email}
	</select>

	<!-- 친구 검색 -->
	<!--  WHERE fullName LIKE '${searchValue}%' -->
	<select id="searchMembers" resultType="kr.co.skein.model.vo.SearchMemberCommand">
		SELECT m.fullName, m.personalURI, m.email, p.profileInfo
			<if test="ignoreEmailValue != null">
			,
			CASE
				WHEN m.email IN (SELECT email FROM FriendshipNotification WHERE friendEmail = #{ignoreEmailValue} AND friendshipConfirm = 0) THEN 0
				WHEN m.email IN (SELECT email FROM FriendshipNotification WHERE friendEmail = #{ignoreEmailValue} AND friendshipConfirm = 1) THEN 1
				WHEN m.email IN (SELECT friendEmail FROM FriendshipNotification WHERE email = #{ignoreEmailValue} AND friendshipConfirm = 0) THEN 2
				WHEN m.email IN (SELECT friendEmail FROM FriendshipNotification WHERE email = #{ignoreEmailValue} AND friendshipConfirm = 1) THEN 3
			ELSE 4
			END AS friendshipConfirm,
			CASE
				WHEN m.email IN (SELECT friendEmail FROM Friendship WHERE email = #{ignoreEmailValue}) THEN 1
			ELSE 0
			END AS isFriend
			</if>
		FROM MEMBERS m LEFT OUTER JOIN (SELECT email, profileInfo FROM Profiles WHERE profileCode = 2) p
		ON m.email = p.email
		<where>
			<if test="searchNameValue != null">
				 m.fullName LIKE '%${searchNameValue}%'
			</if>
			<if test="ignoreEmailValue != null">
				AND m.email != #{ignoreEmailValue}
			</if>
			AND m.isApproved = 1 AND m.isDomranted = 0 AND m.isDropedOut = 0 AND m.isLockedOut = 0
		</where>
		
		ORDER BY m.fullName ASC, m.personalURI ASC
	</select>
	
	<!-- 고유주소로 사용자 이메일 조회하기 -->
	<select id="getEmailByPersonalURI" resultType="String" parameterType="String">
		SELECT email FROM MEMBERS WHERE personalURI=#{personalURI}
	</select>
	
	
	<!-- 사용자 기본 정보 -->
 	<select id="getPublicMember" resultType="kr.co.skein.model.vo.BaseMemberInfo">
 		SELECT m.email, m.personalURI, m.colorTheme, m.birthDay, m.fullName, m.lastName, m.firstName, p.profileInfo
		FROM Members m LEFT OUTER JOIN (SELECT ProfileInfo, email FROM Profiles 
		WHERE email = #{email} AND profilecode = 2) p ON m.email = p.email WHERE m.email = #{email} 
	</select>
	
	
	<!-- 사용자 존재 여부 확인 by Email -->
	<select id="hasMemberByEmail" resultType="Integer">
		SELECT COUNT(email) FROM MEMBERS WHERE email = #{email}
	</select>
	
	<!-- 사용자 존재 여부 확인 by PersonalURI -->
	<select id="hasMemberByPersonalURI" resultType="Integer">
		SELECT COUNT(PersonalURI) FROM MEMBERS WHERE personalURI = #{personalURI}
	</select>
	
	<!-- 사용자 권한 삭제 -->
	<delete id="deleteMemberAuthority" parameterType="String">
		DELETE FROM AUTHORITIES WHERE email = #{email}
	</delete>
	
	<!-- 사용자 권한 변경 -->
	<update id="updateMemberAuthority" parameterType="String">
		UPDATE Authorities SET Authority = #{param1} WHERE email = #{param2}
	</update>
	
	
</mapper>