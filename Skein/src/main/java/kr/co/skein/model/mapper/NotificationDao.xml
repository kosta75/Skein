<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.skein.model.dao.NotificationDao">

	<!-- 사용자 친구 알림 등록 -->
	<insert id="friendshipNotificationReg" parameterType="kr.co.skein.model.vo.FriendshipNotificationCommand">
		<selectKey order="BEFORE" keyProperty="notificationSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(NotificationSeq)),0)+1 FROM Notifications
		</selectKey>
		INSERT ALL
			INTO Notifications(NotificationSeq, Email, IsRead, CreateDate, NotificationCode)
			VALUES(#{notificationSeq}, #{email}, #{isRead}, SYSDATE, #{notificationCode})
			INTO FriendshipNotification(NotificationSeq, Email, FriendEmail, FriendshipConfirm)
			VALUES(#{notificationSeq},#{email}, #{friendEmail}, #{friendshipConfirm})
		SELECT * FROM DUAL
	</insert>
	
	<!-- 사용자 댓글 알림 등록 -->
	<insert id="replyNotificationReg" parameterType="kr.co.skein.model.vo.ReplyNotificationCommand">
		<selectKey order="BEFORE" keyProperty="notificationSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(NotificationSeq)),0)+1 FROM Notifications
		</selectKey>
		INSERT ALL
			INTO Notifications(NotificationSeq, Email, IsRead, CreateDate, NotificationCode)
			VALUES(#{notificationSeq}, #{email}, #{isRead}, SYSDATE, #{notificationCode})
			INTO ReplyNotification(NotificationSeq, ReplySeq)
			VALUES(#{notificationSeq},#{replySeq})
		SELECT * FROM DUAL
	</insert>
	
	
	<!-- 공유 알림 등록 -->
	<insert id="shareNotificationReg" parameterType="kr.co.skein.model.vo.notification.ShareNotification">
		<selectKey order="BEFORE" keyProperty="notificationSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(NotificationSeq)),0)+1 FROM Notifications
		</selectKey>
		INSERT ALL
			INTO Notifications(NotificationSeq, Email, IsRead, CreateDate, NotificationCode)
			VALUES(#{notificationSeq}, #{email}, #{isRead}, SYSDATE, #{notificationCode})
			INTO ShareNotification(NotificationSeq, BoardSeq, SenderEmail, ShareConfirm)
			VALUES(#{notificationSeq},#{boardSeq}, #{senderEmail}, #{shareConfirm})
		SELECT * FROM DUAL
	</insert>
	
	<!--  친구알림 등록  -->
	
	<!-- 1	공지사항
	2	친구신청
	3	친구신청수락
	4	공유신청
	5	공유신청수락
	6	댓글 -->
	<!-- <insert id="friendshipNotificationReg" parameterType="kr.co.skein.model.vo.Notification">
		<selectKey order="BEFORE" keyProperty="notificationSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(NotificationSeq)),0)+1 FROM Notifications
		</selectKey>
		INSERT ALL
			INTO Notifications(NotificationSeq, Email, IsRead, CreateDate, NotificationCode)
			VALUES(#{notificationSeq}, #{email}, #{isRead}, SYSDATE, #{notificationCode})
			<if test="notificationCode == 1">
			
			</if>
			<if test="notificationCode == 2">
			INTO FriendshipNotification VALUES(#{notificationSeq}, #{email}, #{friendEmail}, #{friendshipConfirm})
			</if>
			<if test="notificationCode == 4">
			INTO FriendshipNotification VALUES(#{notificationSeq}, #{email}, #{friendEmail}, #{friendshipConfirm})
			</if>
			<if test="notificationCode == 6">
			INTO FriendshipNotification VALUES(#{notificationSeq}, #{email}, #{friendEmail}, #{friendshipConfirm})
			</if>
		SELECT * FROM DUAL 
	</insert> -->
	
	<!-- 사용자 알림 조회  -->
	<select id="getNotifications" resultType="kr.co.skein.model.vo.NotificationCountCommand">
		SELECT n.NotificationCode, COUNT(*) AS groupCount FROM Notifications n LEFT OUTER JOIN friendshipnotification f ON n.notificationseq = f.notificationseq WHERE n.email = #{email} AND (n.isRead = 0 OR f.friendshipConfirm = 0) GROUP BY NotificationCode
		<!-- SELECT NotificationCode, COUNT(*) AS groupCount FROM Notifications WHERE email = #{email} AND isRead = 0 GROUP BY NotificationCode -->
	</select>
	
	<select id="getFriendshipNotification" resultType="kr.co.skein.model.vo.FriendshipNotificationCommand">
		SELECT n.NotificationSeq, n.Email, n.IsRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm
		FROM Notifications n JOIN FriendshipNotification f ON n.Email = f.Email
		WHERE n.Email = #{email}
	</select>
	
	<!-- 사용자 모든 알림 조회 -->
	<select id="getNotificationAllList" resultType="kr.co.skein.model.vo.NotificationAllCommand">
		SELECT n.NotificationSeq, n.Email, m.personalURI, n.IsRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm, r.replySeq, b.BoardSeq
		FROM NOTIFICATIONS n 
		LEFT OUTER JOIN FRIENDSHIPNOTIFICATION f ON n.notificationSeq = f.notificationSeq
		LEFT OUTER JOIN ReplyNotification r ON n.notificationSeq = r.notificationSeq
		LEFT OUTER JOIN SHARENOTIFICATION s ON n.notificationSeq = s.notificationSeq
		LEFT OUTER JOIN MEMBERS m ON m.email = f.friendEmail
		JOIN Reply re ON r.replySeq = re.replySeq
    	JOIN Board b ON b.boardSeq = re.boardSeq 
		WHERE n.email = #{email} AND (n.isRead = 0 OR f.friendshipConfirm = 0) ORDER BY n.notificationCode ASC, n.notificationSeq DESC
	</select>
	
	
	<!-- 사용자 카테고리별 알림 조회 -->
	<select id="getNotificationListSort" resultType="kr.co.skein.model.vo.NotificationAllCommand">
		
		SELECT n.NotificationSeq, n.Email, m.personalURI, n.IsRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm, r.replySeq, b.BoardSeq
		FROM NOTIFICATIONS n 
		LEFT OUTER JOIN FRIENDSHIPNOTIFICATION f ON n.notificationSeq = f.notificationSeq
		LEFT OUTER JOIN ReplyNotification r ON n.notificationSeq = r.notificationSeq
		LEFT OUTER JOIN SHARENOTIFICATION s ON n.notificationSeq = s.notificationSeq
		LEFT OUTER JOIN MEMBERS m ON m.email = f.friendEmail
		LEFT OUTER JOIN Reply re ON r.replySeq = re.replySeq
    	LEFT OUTER JOIN Board b ON b.boardSeq = re.boardSeq 
		<where>
			n.email =#{param1} AND (n.isRead = 0 OR f.friendshipConfirm = 0)
			<choose>
				<when test="param2 == 2">
					AND n.NotificationCode = 1
				</when>
				<when test="param2 == 3">
					AND n.NotificationCode IN (2, 3)
				</when>
				<when test="param2 == 4">
					AND n.NotificationCode IN (4, 5)
				</when>
				<when test="param2 == 5">
					AND n.NotificationCode = 6
				</when>
			</choose>
		</where>
		ORDER BY n.notificationCode ASC, n.notificationSeq DESC
	</select>
	
	
	<select id="getFriendshipNotificationByNotificationSeq" resultType="kr.co.skein.model.vo.FriendshipNotificationCommand">
		SELECT n.NotificationSeq, n.Email, n.IsRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm
		FROM Notifications n JOIN FriendshipNotification f ON n.notificationSeq = f.notificationSeq
		WHERE n.notificationSeq = #{notificationSeq}	
	</select>
	
	<select id="getFriendshipNotificationBoth" resultType="kr.co.skein.model.vo.FriendshipNotificationCommand">
		SELECT n.NotificationSeq, n.Email, n.IsRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm
		FROM Notifications n JOIN FriendshipNotification f ON n.notificationSeq = f.notificationSeq
		WHERE (n.email = #{param1} AND f.friendEmail = #{param2}) OR (n.email = #{param2} AND f.friendEmail = #{param1}) 	
	</select>
	
	<update id="updateNotification" parameterType="kr.co.skein.model.vo.NotificationCommand">
		UPDATE Notifications
		SET isRead = #{isRead}
		WHERE notificationSeq = #{notificationSeq}
	</update>
	
	<update id="updateFriendshipNotification" parameterType="kr.co.skein.model.vo.FriendshipNotificationCommand">
		UPDATE FriendshipNotification
		SET friendshipConfirm = #{friendshipConfirm}
		WHERE notificationSeq = #{notificationSeq}
	</update>
	
	<!-- 공유 알림 -->
	<update id="updateShareNotificationParent" parameterType="kr.co.skein.model.vo.notification.ShareNotification">
		UPDATE Notifications
		SET isRead = #{isRead}
		WHERE notificationSeq = #{notificationSeq}
	</update>
	
	<update id="updateShareNotification" parameterType="kr.co.skein.model.vo.notification.ShareNotification">
		UPDATE ShareNotification
		SET ShareConfirm = #{shareConfirm}
		WHERE notificationSeq = #{notificationSeq}
	</update>
	<!-- 공유 알림 끝 -->

	<delete id="deleteNotification" parameterType="Integer">
		DELETE FROM Notifications WHERE NotificationSeq = #{param1}
	</delete>
	
	<update id="allNotificationRead" parameterType="String">
		UPDATE Notifications
		SET isRead = 1
		WHERE email = #{email}
	</update>
	
	
	
	
	
	
	<!-- 알림리스트 최종판! -->
	<select id="getFriendshipNotifications" resultType="kr.co.skein.model.vo.notification.FriendshipNotification">
		SELECT n.NotificationSeq, n.Email, n.isRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm FROM Notification n JOIN FriendshipNotification f ON n.notificationSeq = f.notificationSeq
		WHERE email = #{email}
	</select>
	
	
	<select id="getReplyNotifications" resultType="kr.co.skein.model.vo.notification.ReplyNotification">
		SELECT n.NotificationSeq, n.Email, n.isRead, n.CreateDate, n.NotificationCode, r.replySeq FROM Notification n JOIN ReplyNotification r ON n.notificationSeq = r.notificationSeq
		WHERE email = #{email}
	</select>
	
	<select id="getShareNotifications" resultType="kr.co.skein.model.vo.notification.ShareNotification">
		SELECT n.NotificationSeq, n.Email, n.isRead, n.CreateDate, n.NotificationCode, s.BoardSeq, s.SenderEmail, s.ShareConfirm FROM Notification n JOIN ShareNotification s ON n.notificationSeq = s.notificationSeq
		WHERE email = #{email}
	</select>
	
	<select id="hasShareNotification" resultType="Integer">
		SELECT COUNT(n.NotificationSeq) FROM Notifications n JOIN ShareNotification s ON n.notificationSeq = s.notificationSeq
		WHERE s.senderEmail = #{param1} AND n.email = #{param2} AND s.boardSeq = #{param3} 
	</select>
	
	
	<!-- 사용자 전체 알림 조회 -->
	<select id="getMemberNotificationList" resultType="kr.co.skein.model.vo.notification.MemberNotification">
		SELECT n.NotificationSeq, n.Email, n.IsRead, n.CreateDate, n.NotificationCode, 
			CASE
				WHEN NotificationSeq IN (SELECT NotificationSeq FROM FriendshipNotification) THEN (SELECT m.fullName FROM FriendshipNotification f JOIN Members m ON f.FriendEmail = m.email WHERE f.NotificationSeq = n.NotificationSeq)
				WHEN NotificationSeq IN (SELECT NotificationSeq FROM ReplyNotification) THEN (SELECT m.fullName FROM ReplyNotification r JOIN Reply re ON r.ReplySeq = re.ReplySeq JOIN Members m ON re.email = m.email WHERE r.NotificationSeq = n.NotificationSeq)
				WHEN NotificationSeq IN (SELECT NotificationSeq FROM ShareNotification) THEN (SELECT m.fullName FROM ShareNotification s JOIN Members m ON s.SenderEmail = m.Email WHERE s.NotificationSeq = n.NotificationSeq)
				ELSE null
			END AS notificationSenderName,
			CASE
				WHEN NotificationSeq IN (SELECT NotificationSeq FROM FriendshipNotification) THEN (SELECT m.personalURI FROM FriendshipNotification f JOIN Members m ON f.FriendEmail = m.email WHERE f.NotificationSeq = n.NotificationSeq)
				WHEN NotificationSeq IN (SELECT NotificationSeq FROM ReplyNotification) THEN (SELECT m.personalURI FROM ReplyNotification r JOIN Reply re ON r.ReplySeq = re.ReplySeq JOIN Members m ON re.email = m.email WHERE r.NotificationSeq = n.NotificationSeq)
				WHEN NotificationSeq IN (SELECT NotificationSeq FROM ShareNotification) THEN (SELECT m.personalURI FROM ShareNotification s JOIN Members m ON s.SenderEmail = m.Email WHERE s.NotificationSeq = n.NotificationSeq)
				ELSE null
			END AS notificationSenderURI
		FROM Notifications n
		WHERE n.email = #{email}
		ORDER BY n.CreateDate DESC
	</select>
	
	<!-- 친구 알림 상세 정보 -->
	<select id="getFriendshipNotificationDetail" parameterType="Integer" resultType="kr.co.skein.model.vo.notification.FriendshipNotification">
		SELECT n.NotificationSeq, n.Email, n.IsRead, n.CreateDate, n.NotificationCode, f.FriendEmail, f.FriendshipConfirm
		FROM Notifications n JOIN FriendshipNotification f ON n.NotificationSeq = f.NotificationSeq
		WHERE n.NotificationSeq = #{notificationSeq}
	</select>
	
	
	<!-- 공유 알림 상세 정보 -->
	<select id="getShareNotificationDetail" parameterType="Integer" resultType="kr.co.skein.model.vo.notification.ShareNotification">
		SELECT n.NotificationSeq, n.Email, n.IsRead, n.CreateDate, n.NotificationCode, s.BoardSeq, s.SenderEmail, s.ShareConfirm,
			CASE
				WHEN n.Email IN (SELECT Email FROM Board WHERE boardSeq = s.BoardSeq) THEN 1
				ELSE 0
			END AS shareType
		FROM Notifications n JOIN ShareNotification s ON n.NotificationSeq = s.NotificationSeq
		WHERE n.NotificationSeq = #{notificationSeq}
	</select>
	
	
	<select id="getReplyNotificationDetail">
		
	</select>
	
	<update id="readNotification" parameterType="String">
		UPDATE Notifications SET isRead = 1 WHERE email = #{param1} AND notificationSeq = #{param2}
	</update>
	
</mapper>