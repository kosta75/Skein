<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.skein.model.dao.FriendshipDao">
	
	<!--  친구 추가 addFriends -->
	<insert id="addFriends">
		INSERT ALL
			INTO Friendship VALUES(#{param1}, #{param2})
			INTO Friendship VALUES(#{param2}, #{param1})
		SELECT * FROM DUAL 
	</insert>
	
	<!--친구 목록 페이지 -->
	<select id="getFriendList" resultType="kr.co.skein.model.vo.FriendshipListCommand">
		SELECT * FROM 
		(
			SELECT ROWNUM r , s.* FROM
			(
				SELECT f.friendEmail, m.personalURI, m.fullName, p.profileInfo AS profileImageFileName, p2.profileInfo AS publicEmail, p2.publicLevelCode AS publicLevelCodeToEmail
				FROM Friendship f JOIN Members m ON f.friendEmail = m.email
				LEFT OUTER JOIN (SELECT email, profileInfo, publicLevelCode, profileCode FROM profiles WHERE profileCode = 2) p ON f.friendEmail = p.email
				LEFT OUTER JOIN (SELECT email, profileInfo, publicLevelCode, profileCode FROM profiles WHERE profileCode = 3) p2 ON f.friendEmail = p.email
				WHERE f.email = #{param1} AND m.isApproved = 1 AND m.isDomranted = 0 AND m.isDropedOut = 0 AND m.isLockedOut = 0 ORDER BY m.FullName ASC 
			) s
		)
		WHERE r BETWEEN #{param2} AND #{param3}
    </select>
    
    
<!--     private String email;
	private String friendEmail;
	
	private String fullname;	
	private String personalURI; -->
    <!-- 친구 목록 페이징 처리 -->
    <select id="getFriendshipList" resultType="kr.co.skein.model.vo.FriendshipList">
    	SELECT * FROM 
		(
			SELECT ROWNUM r , s.* FROM
			(
				SELECT f.email, f.friendEmail, m.fullName, m.personalURI
				FROM Friendship f JOIN Members m ON f.friendEmail = m.email
				WHERE f.email = #{param1} AND m.isApproved = 1 AND m.isDomranted = 0 AND m.isDropedOut = 0 AND m.isLockedOut = 0 ORDER BY m.FullName ASC 
			) s
		)
		WHERE r BETWEEN #{param2} AND #{param3}
    </select>
    
    <!-- 친구 삭제 -->
    <delete id="deleteFriendship">
    	DELETE FROM Friendship WHERE (Email = #{param1} AND FriendEmail = #{param2}) OR (Email = #{param2} AND FriendEmail = #{param1})  
    </delete>
    
    <!-- 친구 여부 확인 -->
    <select id="isFriend" parameterType="String" resultType="Integer">
    	SELECT COUNT(*) FROM Friendship WHERE (email=#{param1} AND friendEmail=#{param2}) OR (email=#{param2} AND friendEmail=#{param1})
    </select>
    
	<!--share 친구 전체 불러오기  -->
	<select id="getAllFriendList" resultType="kr.co.skein.model.vo.FriendshipListCommand">
		SELECT f.*, m.* FROM friendship f
	JOIN members m ON f.email=m.email
	WHERE f.friendemail=#{email}
    </select>
    
    
    
    
    
</mapper>
